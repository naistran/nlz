#!/usr/bin/env node

var program = require('commander')
var chalk = require('chalk')

program
  .version(require('../package.json').version)
  .usage('<command> [options]')

program.on('--help', function() {
  console.log('  Commands:')
  console.log()
  console.log(chalk.magenta('    Primary Commands:'))
  console.log()
  command('build', 'build the entry points')
  command('walk', 'walk the dependency tree and build the manifest')
  console.log()
  command('link', 'symlink this or another package')
  command('search', 'search the proxy for packages')
  console.log()
  console.log(chalk.magenta('    Dependency Inspection:'))
  console.log()
  command('dependencies', 'list all dependencies')
  command('dependents', 'list all dependents')
  command('duplicates', 'list all duplicates')
  command('tree', 'list all dependencies as a nested tree')
  console.log()
  console.log(chalk.magenta('    Version Management:'))
  console.log()
  command('outdated', 'list all outdated dependencies')
  command('update', 'update all outdated dependencies in the shrinkwrap')
  command('shrinkwrap', 'pin all semver-ranged deps into a shrinkwrap')
  console.log()
  process.exit()

  function command(name, description) {
    name = '      ' + name
    while (name.length < 22) name += ' '
    console.log(name + chalk.grey(description))
  }
})

program.parse(process.argv)

var log = require('normalize-log')

var args = process.argv.slice(2)
if (!args.length) {
  log.error('no command specified. type `nlz --help` for options.')
  process.exit(1)
}

var spawn = require('child_process').spawn
var path = require('path')
var fs = require('fs')
var join = path.join
var stat = fs.statSync
var exists = fs.existsSync
var resolve = path.resolve

var bin = 'nlz-' + args.shift() + '.js'

var local = join(__dirname, bin);

if (exists(local)) {
  bin = local
} else {
  bin = process.env.PATH.split(':').reduce(function(binary, p) {
    p = resolve(p, bin)
    return exists(p) && stat(p).isFile() ? p : binary
  }, bin)
}

if (!exists(bin)) {
  log.error(bin + '(1) does not exist!')
  process.exit(1)
}

var version = process.version.split('.')
var major = version[0].replace('v', '')
var minor = version[1]
var gnode = major < 1 && minor < 11

var proc = spawn(gnode
    ? require.resolve('gnode/bin/gnode')
    : 'node',
  ['--harmony-generators', bin].concat(args),
  { stdio: 'inherit', customFds: [0, 1, 2] })

proc.on('close', function(code){
  process.exit(code)
})
