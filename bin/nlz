#!/usr/bin/env node

var program = require('commander')

program
  .version(require('../package.json').version)
  .usage('<command> [options]')

program.on('--help', function() {
  console.log('  Commands:')
  console.log()
  console.log('    build               build the entry points')
  // console.log('    walk                walk the dependency tree without building')
  // console.log()
  // console.log('    link                symlink the current package')
  // console.log('    search              search the proxy for packages')
  console.log()
  console.log('    dependencies        list all dependencies')
  // console.log('    dependents          list all dependents')
  // console.log('    duplicates          list all duplicate dependencies')
  // console.log('    tree                list all dependencies as a nested tree')
  // console.log()
  // console.log('    outdated            list all outdated dependencies')
  // console.log('    update              update all outdated dependencies in the shrinkwrap')
  // console.log('    shrinkwrap          pin all semver-ranged deps in a file')
  console.log()
  process.exit()
})

program.parse(process.argv)

var args = process.argv.slice(2)
if (!args.length) {
  console.error('error: no command specified. type `nlz --help` for options.')
  process.exit(1)
}

var gnode = require.resolve('gnode/bin/gnode')
var spawn = require('child_process').spawn
var path = require('path')
var fs = require('fs')
var join = path.join
var stat = fs.statSync
var exists = fs.existsSync
var resolve = path.resolve

var bin = 'nlz-' + args.shift() + '.js'

var local = join(__dirname, bin);

if (exists(local)) {
  bin = local
} else {
  bin = process.env.PATH.split(':').reduce(function(binary, p) {
    p = resolve(p, bin)
    return exists(p) && stat(p).isFile() ? p : binary
  }, bin)
}

if (!exists(bin)) {
  console.error('%s(1) does not exist', bin)
  process.exit(1)
}

var proc = spawn(gnode,
  ['--harmony-generators', bin].concat(args),
  { stdio: 'inherit', customFds: [0, 1, 2] })

proc.on('close', function(code){
  process.exit(code)
})
